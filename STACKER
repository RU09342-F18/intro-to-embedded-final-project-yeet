#include <msp430.h>

//Important Comment Notes//
//Below is the code for the Stacker project separated into varying sections.

//The objective of this code is to emulate the Stacker arcade game. The general goal of the code is to implement this game by using a MSP430G2553 microcontroller to control the flow of data and drive various LEDS. In order to control the behavior of data, the objective of this code is to:

//Manipulate the location of a bit within a given byte.

//Compare various bytes.

//Implement user control.

//Design a difficulty system to make the game more rewarding and engaging.

//Design a system usable and approachable without extensive user knowledge.

//Section 1: Variable/Function Initialization
//The purpose of this section is to initialize values and define functions used throughout the code.

#define INPUT1 BIT1 //Defines the input for the 1st Shift Register on PIN 1.1.
#define INPUT2 BIT2 //Defines the input for the 2nd Shift Register on PIN 1.2.
#define INPUT3 BIT3 //Defines the input for the 3rd Shift Register on PIN 1.3.
#define INPUT4 BIT4 //Defines the input for the 4th Shift Register on PIN 1.4.
#define INPUT5 BIT5 //Defines the input for the 5th Shift Register on PIN 1.5.
#define INPUT6 BIT6 //Defines the input for the 6th Shift Register on PIN 1.6.
#define INPUT7 BIT7 //Defines the input for the 7th Shift Register on PIN 1.7.

#define LATCH1 BIT1 //Defines the latch for the 1st Shift Register on PIN 2.1.
#define LATCH2 BIT2 //Defines the latch for the 2nd Shift Register on PIN 2.2.
#define LATCH3 BIT3 //Defines the latch for the 3rd Shift Register on PIN 2.3.
#define LATCH4 BIT4 //Defines the latch for the 4th Shift Register on PIN 2.4.
#define LATCH5 BIT5 //Defines the latch for the 5th Shift Register on PIN 2.5.
#define LATCH6 BIT6 //Defines the latch for the 6th Shift Register on PIN 2.6.
#define LATCH7 BIT7 //Defines the latch for the 7th Shift Register on PIN 2.7.

#define CLOCK BIT0  //Defines the clock output on PIN 1.0.

#define BUTTON BIT0 //Defines the button input on PIN 2.0.

char data1 = 0b00000001; //Sets initial data for all seven shift registers 
char data2 = 0b00000001;
char data3 = 0b00000001;
char data4 = 0b00000001;
char data5 = 0b00000001;
char data6 = 0b00000001;
char data7 = 0b00000001;

int left = 1; //Defines the left variable to be one (This variable was initially used when
both left and right shifting was required)
int i = 0; // Counting variable
int k = 0;
int stage = 0; //Initial stage value

int initialdata1 = 1; //Sets the initialdata condition for each stage, which defines
the TA0CCR0 and sets the data to the desired value.
int initialdata2 = 1;
int initialdata3 = 1;
int initialdata4 = 1;
int initialdata5 = 1;
int initialdata6 = 1;
int initialdata7 = 1;

void pinWrite(unsigned int bit, unsigned char val); //function that writes data bit 
by bit to the shift register
void pulseClock(); //function to pulse the clock on command.
void resetGame(); //function that resets the game upon loss/after the youWin() function.
void youWin(); //function that generates an endgame animation for the user upon winning.

void main(void)
{
     WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    TA0CCTL0 |= CCIE;              //enable CCR0 interrupt

    TA0CTL = TASSEL_2 + MC_1 + ID_3;          // SMCLK, Upmode, 16 Divider
    TA0CCR0 = 30000;                             //Initial PWM speed upon initilization

    P1OUT |= (CLOCK + INPUT1 + INPUT2 + INPUT3 + INPUT4 + INPUT5 + INPUT6 + INPUT7); 
    // Sets the clock and each data input to be an output.
    P1DIR |= (CLOCK + INPUT1 + INPUT2 + INPUT3 + INPUT4 + INPUT5 + INPUT6 + INPUT7);
    // Sets the clock and each data input to be a general I/O.

    P2IE |= BUTTON; //Interrupt is enabled on Pin 2.0 for
    the button.
    P2IES |= BUTTON; //Initially sets interrupt edge to go from high to low on PIN 2.0 for the button.

    P2OUT &= (~LATCH1 + ~LATCH2 + ~LATCH3 + ~LATCH4 + ~LATCH5 + ~LATCH6 + ~LATCH7); // Sets latch low initially for each latch pin
    P2DIR |= (LATCH1 + LATCH2 + LATCH3 + LATCH4 + LATCH5 + LATCH6 + LATCH7);       // Sets the latch pins to be general I/O.

    P2SEL &= ~BIT6; //These pins must be set low in order to be used as general I/O.
    P2SEL &= ~BIT7;

    __enable_interrupt(); //Enables interrupts
    while(1){}
}

//Section 2: Timer A Interrupt Vector
//The purpose of this section is to dictate the speed of the game and behavior of the data.

//Timer A interrupt routine
#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A (void)
{
    if(stage == 0) //If the initial value of stage is 0, it will jump to the next stage.
    {
        stage = 1;
    }
    else if (stage ==  1){
        TA0CCR0 = 20000; //Sets the new speed of the clock output.
        if (initialdata1 == 1){ //This condition exists to ensure that the initial data loaded in consistent.
                    i = 0;
                    left = 1;
                    data1 = 0b00000001;
                    initialdata1 = 0;
                }
        P2OUT &= ~LATCH1; // Set latch low for the shift register

        for(k = 0; k < 5; k++){ //This loop utilizes the pinWrite function to write the byte to the shift register bit by bit.
            pinWrite(INPUT1, (data1 & (1 << k)));
            pulseClock();
        }
        P2OUT |= LATCH1; //Pulses the latch to ensure data transfer
        P2OUT &= ~LATCH1;

        if ((i < 5)&&(left == 1)){ //This line will shift the data to the left by one until the i condition is met.
            i++;
            data1 = data1 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){ //Once the value of i is met, data is reset and reloaded into the shift register.
            data1 = 0b00000001;
                left = 1;
                i = 0;
        }
    }

    else if (stage ==  2){
        TA0CCR0 = 16000;
        if (initialdata2 == 1){
            i = 0;
            left = 1;
            data2 = 0b00000001;
            initialdata2 = 0;
        }
        P2OUT &= ~LATCH2; // Set latch low

        for(k = 0; k < 5; k++){
            pinWrite(INPUT2, (data2 & (1 << k)));
            pulseClock();
        }

        P2OUT |= LATCH2;
        P2OUT &= ~LATCH2;

        if ((i < 5)&&(left == 1)){
            i++;
            data2 = data2 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){
            data2 = 0b00000001;
                            left = 1;
                            i = 0;
        }
    }

    else if (stage ==  3){
        TA0CCR0 = 13000;
        if (initialdata3 == 1){
            i = 0;
            left = 1;
            data3 = 0b00000001;
            initialdata3 = 0;
        }
        P2OUT &= ~LATCH3; // Set latch low

        for(k = 0; k < 5; k++){
            pinWrite(INPUT3, (data3 & (1 << k)));
            pulseClock();
        }

        P2OUT |= LATCH3;
        P2OUT &= ~LATCH3;

        if ((i < 5)&&(left == 1)){
            i++;
            data3 = data3 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){
            data3 = 0b00000001;
                            left = 1;
                            i = 0;
        }
    }

    else if (stage ==  4){
        TA0CCR0 = 10000;
        if (initialdata4 == 1){
            i = 0;
            left = 1;
            data4 = 0b00000001;
            initialdata4 = 0;
        }
        P2OUT &= ~LATCH4; // Set latch low

        for(k = 0; k < 5; k++){
            pinWrite(INPUT4, (data4 & (1 << k)));
            pulseClock();
        }

        P2OUT |= LATCH4;
        P2OUT &= ~LATCH4;

        if ((i < 5)&&(left == 1)){
            i++;
            data4 = data4 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){
            data4 = 0b00000001;
                            left = 1;
                            i = 0;
        }
    }

    else if (stage ==  5){
        TA0CCR0 = 9000;
        if (initialdata5 == 1){
            i = 0;
            left = 1;
            data5 = 0b00000001;
            initialdata5 = 0;
        }
        P2OUT &= ~LATCH5; // Set latch low

        for(k = 0; k < 5; k++){
            pinWrite(INPUT5, (data5 & (1 << k)));
            pulseClock();
        }

        P2OUT |= LATCH5;
        P2OUT &= ~LATCH5;

        if ((i < 5)&&(left == 1)){
            i++;
            data5 = data5 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){
            data5 = 0b00000001;
                            left = 1;
                            i = 0;
        }
    }

    else if (stage ==  6){
        TA0CCR0 = 7000;
        if (initialdata6 == 1){
            i = 0;
            left = 1;
            data6 = 0b00000001;
            initialdata6 = 0;
        }

        P2OUT &= ~LATCH6; // Set latch low

        for(k = 0; k < 5; k++){
            pinWrite(INPUT6, (data6 & (1 << k)));
            pulseClock();
        }

        P2OUT |= LATCH6;
        P2OUT &= ~LATCH6;

        if ((i < 5)&&(left == 1)){
            i++;
            data6 = data6 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){
            data6 = 0b00000001;
                            left = 1;
                            i = 0;
        }
    }

    else if (stage ==  7){
        TA0CCR0 = 5000;
        if (initialdata7 == 1){
            i = 0;
            left = 1;
            data7 = 0b00000001;
            initialdata7 = 0;
        }
        P2OUT &= ~LATCH7; // Set latch low

        for(k = 0; k < 5; k++){
            pinWrite(INPUT7, (data7 & (1 << k)));
            pulseClock();
        }

        P2OUT |= LATCH7;
        P2OUT &= ~LATCH7;

        if ((i < 5)&&(left == 1)){
            i++;
            data7 = data7 << 1;
            if (i == 4){ left = 0;}
        }
        else if ((i >= 4)&&(left == 0)){
            data7 = 0b00000001;
                                        left = 1;
                                        i = 0;

        }
    }

}
//Section 3: Button Interrupt 

//The purpose of this section is to define the behavior of the code when the user pressed the button. This section involves comparing data at varying stages.

#pragma vector=PORT2_VECTOR //Port 1 Vector interrupt occurs when Pin 2.0 (Button) goes from high to low
__interrupt void Port_2(void){
    if (P2IN & BUTTON){
    __delay_cycles(100); //Delays the interrupt to assist in debouncing the button input.
    }
    if ((stage == 1) | (stage == 0)){ //Sets the initial byte location.
        stage++; //proceeds to next stage
    }

    else if ((stage == 2) & (data2 == data1)){ //Checks if the second stage is equal to two and data1 and data2 are equal.
        stage++; //proceeds to next stage
    }

    else if ((stage == 3) & (data3 == data2)){ //Checks if the third stage is equal to three and data2 and data3 are equal.
        stage++; //proceeds to next stage
    }

    else if ((stage == 4) & (data4 == data3)){ //Checks if the fourth stage is equal to four and data3 and data4 are equal.
        stage++; //proceeds to next stage
    }

    else if ((stage == 5) & (data5 == data4)){ //Checks if the fifth stage is equal to five and data4 and data5 are equal.
        stage++; //proceeds to next stage
    }

    else if ((stage == 6) & (data6 == data5)){ //Checks if the sixth stage is equal to six and data5 and data6 are equal.
        stage++; //proceeds to next stage
    }

    else if ((stage == 7) & (data7 == data6)){ //Checks if the seven stage is equal to seven and data6 and data7 are equal.
        youWin(); //proceeds to the win function
    }

    else {
        resetGame(); //If none of the conditions are met above, game is reset to initial state.
    }

    P2IFG &= ~BUTTON; //Flag clear on Pin 2.0 (Button)
}

//Section 4: Function Definitions

//The purpose of this section is to define the behavior of the function used throughout the code.

void pinWrite(unsigned int bit, unsigned char val){ //Function used to write data to the shift registers bit by bit.
    if (val){
        P1OUT |= bit; //If value is logical high, sets bit to 1.
    }
    else{
        P1OUT &= ~bit; //If value is logical low, sets bit to 0.
    }
}

void pulseClock(){ //Function used to manually pulse the clock
    P1OUT |= CLOCK;
    __delay_cycles(5);
    P1OUT ^= CLOCK;
}

void resetGame(){ //Reset condition used to set the game back to the initial conditions for repeated play.
    stage = 0;
    i = 0;
    left = 1;

    initialdata2 = 1;
    initialdata3 = 1;
    initialdata4 = 1;
    initialdata5 = 1;
    initialdata6 = 1;
    initialdata7 = 1;

    data1 = 0b00000001;
    data2 = 0b00000000;
    data3 = 0b00000000;
    data4 = 0b00000000;
    data5 = 0b00000000;
    data6 = 0b00000000;
    data7 = 0b00000000;

    P2OUT &= ~LATCH1; // Set latch low
    for(k = 0; k < 5; k++){
        pinWrite(INPUT1, (data1 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH1;
    P2OUT &= ~LATCH1;

    P2OUT &= ~LATCH2;
    for(k = 0; k < 5; k++){
        pinWrite(INPUT2, (data2 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH2;
    P2OUT &= ~LATCH2;

    P2OUT &= ~LATCH3;
    for(k = 0; k < 5; k++){
        pinWrite(INPUT3, (data3 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH3;
    P2OUT &= ~LATCH3;

    P2OUT &= ~LATCH4;
    for(k = 0; k < 5; k++){
        pinWrite(INPUT4, (data4 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH4;
    P2OUT &= ~LATCH4;

    P2OUT &= ~LATCH5;
    for(k = 0; k < 5; k++){
        pinWrite(INPUT5, (data5 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH5;
    P2OUT &= ~LATCH5;


    P2OUT &= ~LATCH6;
    for(k = 0; k < 5; k++){
        pinWrite(INPUT6, (data6 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH6;
    P2OUT &= ~LATCH6;


    P2OUT &= ~LATCH7;
    for(k = 0; k < 5; k++){
        pinWrite(INPUT7, (data7 & (1 << k)));
        pulseClock();
    }
    P2OUT |= LATCH7;
    P2OUT &= ~LATCH7;
}

void youWin(){ //Function used to inform the user that they have won and perform a small win animation.
    TA0CCR0 = 7000;
    data7 = 0b00010101;
    P2OUT &= ~LATCH7; 

    for(k = 0; k < 5; k++){
        pinWrite(INPUT7, (data7 & (1 << k)));
        pulseClock();            
    }

    P2OUT |= LATCH7;
    P2OUT &= ~LATCH7;
}
